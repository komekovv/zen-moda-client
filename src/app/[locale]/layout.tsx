import type {Metadata} from "next";
import "../globals.css";
import {Inter, Rubik} from "next/font/google";
import {ModalProvider} from "@/contexts/modal-context";
import {ClientAuthProvider} from "@/contexts/auth-provider";
import LoginModal from "@/components/modals/LoginModal";
import { AddAddressModal } from "@/components/address";
import {notFound} from "next/navigation";
import {SupportedLocales} from "@/types/types";
import {routing} from "@/i18n/routing";
import {NextIntlClientProvider} from "next-intl";
import QueryProvider from "@/providers/query-provider";
import 'swiper/css';

const inter = Inter({
    subsets: ['latin'],
    weight: ['400', '500', '600', '700', '800'],
    variable: '--font-inter',
    display: 'swap',
});

const rubik = Rubik({
    subsets: ['latin'],
    weight: ['400', '700'],
    variable: '--font-rubik',
    display: 'swap',
});

export const metadata: Metadata = {
    title: "Zen Moda",
    description: "Generated by create next app",
};

export default async function RootLayout({
                                             children,
                                             params: {locale}
                                         }: {
    children: React.ReactNode,
    params: { locale: string }
}) {
    if (!routing.locales.includes(locale as SupportedLocales)) {
        notFound();
    }

    let messages;
    try {
        messages = (await import(`../../messages/${locale}.json`)).default;
    } catch (error) {
        notFound();
    }
    return (
        <html lang="tk">
        <body
            className={`${inter.variable} ${rubik.variable} antialiased`}
        >
        <NextIntlClientProvider locale={locale} messages={messages}>
            <QueryProvider>
                <ClientAuthProvider>
                    <ModalProvider>
                        {children}
                        <LoginModal/>
                        <AddAddressModal/>
                    </ModalProvider>
                </ClientAuthProvider>
            </QueryProvider>
        </NextIntlClientProvider>
        </body>
        </html>
    );
}
